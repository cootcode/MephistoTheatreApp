@model DGrabowski_MephistoTheatreApp.Models.Post

@{
    ViewBag.Title = Model.Title;
}

<style>
    /* Custom styles for search widget */
    .search-card {
        width: 100%;
    }

    /* Styles for post content */
    article {
        margin-bottom: 30px;
    }

    /* Styles for comments section */
    .card.bg-light {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
    }

    #comment-text {
        width: 100%;
        max-width: 100%;
    }

    .comment {
        border: 1px solid #ddd;
        margin-bottom: 15px;
        padding: 10px;
    }

    .comment-header {
        background-color: #f5f5f5;
        padding: 5px;
    }

    .comment-body {
        margin-top: 5px;
    }

    .nested-comments {
        margin-left: 20px; /* Adjust indentation for nested comments */
    }

    .sub-comment {
        border: 1px solid #ddd;
        margin-top: 10px;
        padding: 8px;
    }

    .sub-comment-header {
        background-color: #f5f5f5;
        padding: 3px;
    }

    .sub-comment-body {
        margin-top: 5px;
    }
</style>

<!-- Horizontal Image with three masks top of the page-->
<img src="~/images/triplemasksimage.png" class="img-fluid" alt="Responsive Image" />
<!-- Page content-->
<div class="container mt-5">
    <div class="row">
        <div class="col-lg-8">
            <!-- Post content-->
            <article>
                <!-- Post header-->
                <header class="mb-4">
                    <!-- Post title-->
                    <h1 class="fw-bolder mb-1">@Model.Title</h1>
                    <!-- Post meta content-->
                    <div class="text-muted fst-italic mb-2">Posted on @Model.CreatedAt.ToShortDateString() by @Model.Staff.FirstName @Model.Staff.LastName (@Model.Staff.UserName)</div>
                    <!-- Post categories-->
                    <div>
                        <a class="badge bg-secondary text-decoration-none link-light" href="#!">@Model.Category.CategoryName</a>
                    </div>
                </header>
                <!-- Preview image figure-->
                <figure class="mb-4">
                    <img class="img-fluid rounded" src="@Url.Content(Model.Category.ImagePath)" alt="..." />
                </figure>
                <!-- Post content-->
                <section class="mb-5">
                    @Html.Raw(Model.Body) <!-- Render HTML content -->
                </section>
            </article>
            <!-- Comments section -->
            <section class="mb-5">
                <div class="card bg-light">
                    <div class="card-body">
                        <!-- Comment form -->
                        @if (User.Identity.IsAuthenticated)
                        {
                            <form id="comment-form" class="mb-4">
                                <textarea class="form-control" rows="3" placeholder="Join the discussion and leave a comment!" id="comment-text"></textarea>
                                <button type="button" class="btn btn-primary mt-2" onclick="submitComment()">Submit Comment</button>
                            </form>
                        }
                        else
                        {
                            <div class="alert alert-warning" role="alert">
                                You need to be logged in to comment. <a href="@Url.Action("Login", "Account")">Log in here</a>.
                            </div>
                        }
                        <!-- Comment container -->
                        <div id="comments-container" class="col-lg-12">
                            @Html.Partial("_Comments", Model.Comments.ToList())
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <div class="col-lg-4">
            <!-- Side widgets-->
            <div class="col-lg-12">
                <!-- Search widget-->
                <div class="card mb-4 search-card">
                    <div class="card-header">Search</div>
                    <div class="card-body">
                        @using (Html.BeginForm("Search", "Post", FormMethod.Get, new { @class = "input-group", onsubmit = "return validateSearchForm();" }))
                        {
                            <input class="form-control" type="text" name="SearchTerm" placeholder="Enter search term..." aria-label="Enter search term..." aria-describedby="button-search" required />
                            <button class="btn btn-primary" id="button-search" type="submit">Go!</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
@section scripts {
    <script>
        function toggleReplyForm(commentId) {
            var form = $('#reply-form-' + commentId);
            form.toggle();
        }

        function submitComment() {
            var commentText = $('#comment-text').val().trim();
            if (!commentText) {
                alert("Please enter a comment before submitting.");
                return;
            }
        var postId = @Model.PostId;

        $.ajax({
            type: 'POST',
            url: '/Posts/SubmitComment',
            data: { commentText: commentText, postId: postId },
            success: function (data) {
                if (data.success) {
                    // If successful, update the comments container
                    $('#comments-container').html(data.html);
                    // Optionally, clear the comment textarea after submission
                    alert("Comment submitted successfully!");
                    $('#comment-text').val('');
                } else {
                    // If unsuccessful, display the error message
                    alert(data.message); // You can use a more user-friendly UI element for the error message
                }
            },
            error: function (error) {
                console.error("Error submitting comment:", error);
            }
        });
        }

        function submitReply(commentId) {
            var replyText = $('#reply-text-' + commentId).val().trim();
            if (!replyText) {
                alert("Please enter a reply before submitting.");
                return;
            }

                console.log('Attempting to submit reply for commentId:', commentId);

                // Retrieve the reply text from the textarea
                var replyText = $('#reply-text-' + commentId).val();
                console.log('Reply text:', replyText);

                
                var postId = @Model.PostId;

                $.ajax({
                    type: 'POST',
                    url: '/Posts/SubmitReply',
                    data: { replyText: replyText, commentId: commentId, postId: postId },
                    success: function (data) {
                        if (data.success) {
                            // If successful, update the comments container
                            $('#comments-container').html(data.html);
                            // clear the reply textarea after submission
                            alert("Comment submitted successfully!");
                            $('#reply-text-' + commentId).val('');
                        } else {
                            // If unsuccessful, display the error message
                            alert(data.message);
                        }
                    },
                    error: function (error) {
                        console.error("Error submitting reply:", error);
                    }
                });
        }

        function checkForUpdates() {
            var postId = @Model.PostId;

            // Make an AJAX request to check for updates
            $.ajax({
                url: "/Posts/GetComments/" + postId,
                type: "GET",
                success: function (data) {
                    // Update the comments section with the new data
                    $("#comments-container").html(data);
                },
                error: function (error) {
                    console.error("Error checking for updates: " + error);
                }
            });
        }

        // Periodically check for updates every 30 seconds (adjust as needed)
        setInterval(checkForUpdates, 30000);

        $(document).ready(function () {
            var postId = @Model.PostId;

            // Make an initial GET request to load comments for the post
            $.get("/Posts/GetComments", { postId: postId }, function (data) {
                $('#comments-container').html(data);
            });
        });
    </script>
}
